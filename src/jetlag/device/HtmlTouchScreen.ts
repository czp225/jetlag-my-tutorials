import { JetLagTouchReceiverHolder, JetLagTouchScreen } from "../support/Interfaces";

/**
 * TouchScreen abstracts away how gestures (pan, swipe, tap, rotate, pinch,
 * press) are generated by the device, and simply passes gesture events to
 * whatever object has subscribed to it.
 *
 * Based on how JetLag is designed, we can get by with a single subscriber for
 * each gesture event
 */
export class HtmlTouchScreen implements JetLagTouchScreen {
    /** The DOM element that receives gesture events */
    private elt: HTMLElement;

    /**
     * Create a TouchScreen by providing the name of an HTML element (typically
     * a DIV) that should begin receiving gestures.  Note that gestures will not
     * be handled until a TouchReceiver is provided.
     * 
     * @param domId The Id of the DOM element that will receive gesture events
     */
    constructor(domId: string) {
        this.elt = document.getElementById(domId);
    }

    public setTouchReceiverHolder(holder: JetLagTouchReceiverHolder) {
        // Since we are using gestures, turn off left clicking of the whole page
        //
        // NB: only do this the first time a TouchReceiver is provided.
        this.elt.oncontextmenu = function (this: HTMLElement, ev: PointerEvent): any {
            return false;
        }

        // Set up handlers for all the Hammer events
        let hammer = new Hammer(this.elt);
        hammer.on('tap', (ev: HammerInput) => {
            holder.getTouchReceiver().tap((ev.srcEvent as PointerEvent).offsetX, (ev.srcEvent as PointerEvent).offsetY);
        });
        hammer.get('pan').set({ direction: Hammer.DIRECTION_ALL });
        hammer.on('panstart', (ev: HammerInput) => {
            holder.getTouchReceiver().panStart((ev.srcEvent as PointerEvent).offsetX, (ev.srcEvent as PointerEvent).offsetY);
        });
        hammer.on('panmove', (ev: HammerInput) => {
            holder.getTouchReceiver().panMove((ev.srcEvent as PointerEvent).offsetX, (ev.srcEvent as PointerEvent).offsetY);
        });
        hammer.on('panend', (ev: HammerInput) => {
            holder.getTouchReceiver().panStop((ev.srcEvent as PointerEvent).offsetX, (ev.srcEvent as PointerEvent).offsetY);
        });
        hammer.on('pancancel', (ev: HammerInput) => {
            holder.getTouchReceiver().panStop((ev.srcEvent as PointerEvent).offsetX, (ev.srcEvent as PointerEvent).offsetY);
        });

        // this gets us 'downpress' and 'release'.  See "input events" on http://hammerjs.github.io/api/
        hammer.on("hammer.input", (ev: HammerInput) => {
            if (ev.eventType == 1) {
                holder.getTouchReceiver().touchDown((ev.srcEvent as PointerEvent).offsetX, (ev.srcEvent as PointerEvent).offsetY);
            }
            else if (ev.eventType == 4) {
                holder.getTouchReceiver().touchUp((ev.srcEvent as PointerEvent).offsetX, (ev.srcEvent as PointerEvent).offsetY);
            }
        });
        // NB: swipe also registers pans.
        // NB: there is swipeup, swipeleft, swiperight, swipedown
        hammer.on('swipe', (ev: HammerInput) => {
            holder.getTouchReceiver().swipe(ev.center.x - ev.deltaX, ev.center.y - ev.deltaY, ev.center.x, ev.center.y, ev.deltaTime);
        });
        hammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
    }
}